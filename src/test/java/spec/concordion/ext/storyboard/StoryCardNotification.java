/*
 * Copyright (c) 2010 Two Ten Consulting Limited, New Zealand 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package spec.concordion.ext.storyboard;

import java.io.StringReader;
import java.io.StringWriter;

import javax.xml.transform.OutputKeys;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.concordion.api.extension.Extension;
import org.concordion.ext.StoryboardExtension;
import org.concordion.ext.storyboard.CardImage;
import org.concordion.ext.storyboard.CardResult;
import org.concordion.ext.storyboard.NotificationCard;
import org.concordion.ext.storyboard.StockCardImage;
import org.concordion.integration.junit4.ConcordionRunner;
import org.junit.Before;
import org.junit.runner.RunWith;

import test.concordion.ext.storyboard.DummyStoryboardFactory;

@RunWith(ConcordionRunner.class)
public class StoryCardNotification extends AcceptanceTest {
    
    public static final String SPEC_NAME = "/" + StoryCardNotification.class.getName().replaceAll("\\.","/");
    
    @Extension
    public StoryboardExtension storyboard = new StoryboardExtension().setScreenshotTaker(null);
    
    @Before 
    public void installExtension() {
        System.setProperty("concordion.extensions", DummyStoryboardFactory.class.getName());
    }
    
    public String render(String fragment, String acronym) throws Exception {
    	DummyStoryboardFactory.setScreenshotTaker(null);
    	
        return getTestRig()
        		.processFragment(fragment, SPEC_NAME)	            
        		.getElementXML("storyboard");
    }
    
    public String renderWithFailureOff(String fragment, String acronym) throws Exception {
    	DummyStoryboardFactory.setAddCardOnFailure(false);
    	
    	String result = render(fragment, acronym);
    	
    	DummyStoryboardFactory.setAddCardOnFailure(true);
    	
    	return result;
    }
    
    public void addNotification(String data) {
    	DummyStoryboardFactory.getStoryboard().addNotification("Notification Example", "Example 1", data, "html", StockCardImage.XML_RESPONSE, CardResult.SUCCESS);
    }
        
    public boolean notificationCardAdded(String fragment) {
    	addNotificationToSpec(fragment, StockCardImage.XML_RESPONSE, fragment);
    	
    	return fragment.contains("Notification Example");    	
    }
    
    public boolean failureCardAdded(String fragment) {
    	addNotificationToSpec(fragment, StockCardImage.ERROR, fragment);
    	
    	return fragment.contains("Test Failed");
    }
    
    public boolean noCardAdded(String fragment) {
    	if (!"".equals(fragment)) {
    		addNotificationToSpec(fragment, StockCardImage.COMPLETE, fragment);
    	}
    	
    	return "".equals(fragment);
    }
    
    public boolean exceptionCardAdded(String fragment) {
    	addNotificationToSpec(fragment, StockCardImage.ERROR, fragment);
    	
    	return fragment.contains("Exception");
    }
    
    private void addNotificationToSpec(String fragment, CardImage image, String data) {
    	String prefix = "This is the storyboard HTML generated by the test:\n";
    	
    	if (image.equals(StockCardImage.ERROR)) {
    		prefix += "NOTE: The html below does not link to any data, this behavour has been overridden in this specification.\n";
    	}
    	
    	prefix += "\n";
    	
    	// This is so the specification will echo what the test was doing
    	NotificationCard card = new NotificationCard();    	
    	card.setTitle(extractText(fragment, "scsummary"));
	    card.setDescription(extractText(fragment, "scdescription"));	    	
    	card.setData(prefix + prettyFormat(data, 4));
    	card.setFileExtension("txt");
    	card.setCardImage(image);    	
    	if(fragment.contains("scfailure")) {
    		card.setResult(CardResult.FAILURE);
    	} else {
    		card.setResult(CardResult.SUCCESS);
    	}
    	
    	storyboard.addCard(card);
    }
    
    public static String prettyFormat(String input, int indent) {
    	if (input.equals("")) return input;
    	
        try {
            Source xmlInput = new StreamSource(new StringReader(input));
            StringWriter stringWriter = new StringWriter();
            StreamResult xmlOutput = new StreamResult(stringWriter);
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            transformerFactory.setAttribute("indent-number", indent);
            Transformer transformer = transformerFactory.newTransformer(); 
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.transform(xmlInput, xmlOutput);
            return xmlOutput.getWriter().toString();
        } catch (Exception e) {
            throw new RuntimeException(e); 
        }
    }

    private String extractText(String fragment, String className) {
    	int start = fragment.indexOf(className);
    	int end = 0;
    	
    	if (start < 1) return "";
    	
    	start = fragment.indexOf(">", start) + 1;
    	end = fragment.indexOf("<", start);
    	
    	return fragment.substring(start, end);
    }
}
